using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Text;

namespace Cosmenist.Utility.Commons
{
    public class CsvExport
    {
        /// <summary>
        /// To keep the ordered list of column names
        /// </summary>
        private readonly List<string> fields = new List<string>();

        /// <summary>
        /// The list of rows
        /// </summary>
        private readonly List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();

        /// <summary>
        /// The current row
        /// </summary>
        private Dictionary<string, object> CurrentRow => rows[rows.Count - 1];

        /// <summary>
        /// The string used to separate columns in the output
        /// </summary>
        private readonly string columnSeparator;

        /// <summary>
        /// The bool used to add separate between two columns in the output
        /// </summary>
        private readonly bool isIncludeSeparator;

        /// <summary>
        /// Whether to include the preamble that declares which column separator is used in the output
        /// </summary>
        private readonly bool includeColumnSeparatorDefinitionPreamble;

        /// <summary>
        /// Initializes a new instance of the <see cref="Cosmenist.Utility.Commons.CsvExport"/> class.
        /// </summary>
        /// <param name="columnSeparator">
        /// The string used to separate columns in the output.
        /// By default this is a comma so that the generated output is a CSV file.
        /// </param>
        /// <param name="includeColumnSeparatorDefinitionPreamble">
        /// Whether to include the preamble that declares which column separator is used in the output.
        /// By default this is <c>true</c> so that Excel can open the generated CSV
        /// without asking the user to specify the delimiter used in the file.
        /// </param>
        public CsvExport(string columnSeparator = ",", bool includeColumnSeparatorDefinitionPreamble = true, bool isIncludeSeparator = true)
        {
            this.columnSeparator = columnSeparator;
            this.includeColumnSeparatorDefinitionPreamble = includeColumnSeparatorDefinitionPreamble;
            this.isIncludeSeparator = isIncludeSeparator;
        }

        /// <summary>
        /// Set a value on this column
        /// </summary>
        public object this[string field]
        {
            set
            {
                // Keep track of the field names, because the dictionary loses the ordering
                if (!fields.Contains(field)) fields.Add(field);
                CurrentRow[field] = value;
            }
        }

        /// <summary>
        /// Call this before setting any fields on a row
        /// </summary>
        public void AddRow()
        {
            rows.Add(new Dictionary<string, object>());
        }

        /// <summary>
        /// Add a list of typed objects, maps object properties to CsvFields
        /// </summary>
        public void AddRows<T>(IEnumerable<T> list)
        {
            if (list.Any())
            {
                foreach (var obj in list)
                {
                    AddRow();
                    var values = obj.GetType().GetProperties();
                    foreach (var value in values)
                    {
                        this[value.Name] = value.GetValue(obj, null);
                    }
                }
            }
        }

        /// <summary>
        /// Converts a value to how it should output in a csv file
        /// If it has a comma, it needs surrounding with double quotes
        /// Eg Sydney, Australia -> "Sydney, Australia"
        /// Also if it contains any double quotes ("), then they need to be replaced with quad quotes[sic] ("")
        /// Eg "Dangerous Dan" McGrew -> """Dangerous Dan"" McGrew"
        /// </summary>
        /// <param name="columnSeparator">
        /// The string used to separate columns in the output.
        /// By default this is a comma so that the generated output is a CSV document.
        /// </param>
        public static string MakeValueCsvFriendly(object value, string columnSeparator = ",")
        {
            if (value == null) return "";
            if (value is INullable && ((INullable)value).IsNull) return "";
            if (value is DateTime)
            {
                if (((DateTime)value).TimeOfDay.TotalSeconds == 0)
                    return ((DateTime)value).ToString("yyyy-MM-dd");
                return ((DateTime)value).ToString("yyyy-MM-dd HH:mm:ss");
            }
            string output = value.ToString();

            if (output.Length > 30000) //cropping value for stupid Excel
                output = output.Substring(0, 30000);

            if (output.Contains(columnSeparator) || output.Contains("\"") || output.Contains("\n") || output.Contains("\r"))
                output = '"' + output.Replace("\"", "\"\"") + '"';

            return output;
        }

        /// <summary>
        /// Outputs all rows as a CSV, returning one string at a time
        /// </summary>
        private IEnumerable<string> ExportToLines(Boolean includeHeader = false, bool ignoreSeparatorAfter = false)
        {
            if (includeColumnSeparatorDefinitionPreamble) yield return columnSeparator;

            // The header
            if (includeHeader)
            {
               if(isIncludeSeparator)
                    yield return string.Join(columnSeparator, fields.Select(f => MakeValueCsvFriendly(f, columnSeparator)));
               else
                    yield return string.Concat(fields.Select(f => MakeValueCsvFriendly(f, columnSeparator)));
            }

            IEnumerable<string> result = Enumerable.Empty<string>();
           
            // The rows
            foreach (Dictionary<string, object> row in rows)
            {
                if (ignoreSeparatorAfter)
                {
                    var data = fields.Where(f => row.ContainsKey(f));
                    if (isIncludeSeparator)
                        yield return string.Join(columnSeparator, data.Select(field => MakeValueCsvFriendly(row[field], columnSeparator)));
                    else
                        yield return string.Concat(data.Select(field => MakeValueCsvFriendly(row[field], columnSeparator)));
                }
                else
                {
                    foreach (string k in fields.Where(f => !row.ContainsKey(f)))
                    {
                        row[k] = null;
                    }
                    if (isIncludeSeparator)
                        yield return string.Join(columnSeparator, fields.Select(field => MakeValueCsvFriendly(row[field], columnSeparator)));
                    else
                        yield return string.Concat(fields.Select(field => MakeValueCsvFriendly(row[field], columnSeparator)));
                }                
            }
        }

        /// <summary>
        /// Output all rows as a CSV returning a string
        /// </summary>
        public string Export(Boolean includeHeader = false, bool ignoreSeparatorAfter = false)
        {
            StringBuilder sb = new StringBuilder();

            foreach (string item in ExportToLines(includeHeader, ignoreSeparatorAfter))
            {
                sb.AppendLine(item);
                //sb.AppendLine(item.Remove(item.Length - 1, 1));
            }

            return sb.ToString();
        }

        /// <summary>
        /// Exports to a file
        /// </summary>
        public void ExportToFile(string path, Boolean includeHeader = false)
        {
            File.WriteAllLines(path, ExportToLines(includeHeader), Encoding.UTF8);
        }

        /// <summary>
        /// Exports as raw UTF8 bytes
        /// </summary>
        public byte[] ExportToBytes(Boolean includeHeader = false, bool ignoreSeparatorAfter = false)
        {
            var data = Encoding.UTF8.GetBytes(Export(includeHeader, ignoreSeparatorAfter));
            return Encoding.UTF8.GetPreamble().Concat(data).ToArray();
        }
    }
}
